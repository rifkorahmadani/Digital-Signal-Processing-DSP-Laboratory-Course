# -*- coding: utf-8 -*-
"""Pertemuan1_RIFKO SATRIO RAHMADANI_231344057

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/167ln_Gs1HaqR_cPlHikraSI-BfEjmKIF

Latihan: 1
"""

num = int(input("masukkan nomor: "))
hasil = num*num

print(f"hasil kuadrat dari {num} adalah {hasil}")

"""Latihan:2"""

num1 = int(input("Masukkan nilai angka: "))
num2 = int(input("Masukkan berapa Persen: "))

hasil = num1*num2/100
print(f"{num2}% dari {num1} ialah {hasil}")

"""Latihan:3"""

Todo = ["belajar", "berdo'a", "bermain"]
print("Todo List:")
for tugas in Todo:
    print(f"- {tugas}")

while True:
    update = input("Masukkan daftar baru (ketik 'hentikan' untuk menyelesaikannya): ")
    if update.lower() == "hentikan":
        break
    Todo.append(update)

print("\nUpdated Todo list:")
for tugas in Todo:
    print(f"- {tugas}")

"""Latihan:4"""

#diminta input dari pengguna untuk dua angka
num1 = int(input("Masukkan Angka ke-1: ")) #input pertama
num2 = int(input("Masukkan Angka ke-2: ")) #input kedua
op = input("Masukkan Operator: ")

if op == "+":
  print(num1+num2)

elif op == "-":
  print(num1-num2)

elif op == "x":
  print(num1*num2)

elif op == ":":
  print(num1/num2)

elif op == "/*":
  print(num1%num2)

elif op == "^":
  print(num1**num2)

elif op == "%":
  print((num1*num2)/100)
else:
  print("Data Tidak ada") #Operator yang dimasukkan tidak dikenali

"""Latihan: 5"""

for numbers in range(0,100):
 if numbers % 3==0:
    print(numbers)

"""EP_1"""

nomor = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
nomor_genap = [num for num in nomor if num % 2 == 0] #hanya ambil angka yang jika habis di bagi 2
print(nomor_genap)

"""EP_2"""

text = "Digital Signal Processing is interesting"
print(f'"{text}"')

"""EP_3"""

numbers = [4, 2, 9, 4, 2, 1, 5, 6, 9, 7]

hasil = sorted(set(numbers))
#Set hanya menyimpan angka yang muncul lebih dari sekali (seperti 4 dan 2), sehingga berjumlah satu yang akan dipertahankan, intinya ngehapus duplikat.
#Sorted untuk mengurutkan hasil dari ngehapus duplikat sebelumnya.
print(hasil)

"""EP_4"""

def fibonacci_loop(N):
#list dimulai dengan adanya dua angka pertama dari urutan Fibonacci, 0 dan 1
    fib_sequence = [0, 1]

#Loopnya dimulai dari angka ke-2 karena sudah ada dua angka pertama sebelumnya
    for _ in range(2, N):

#fib_sequence adalah sebuah sequence atau urutan angka yang mengikuti pola Fibonacci.
#fib_sequence[-1] itu angka terakhir, dan fib_sequence[-2] itu angka kedua terakhir
#adanya append guna nilai yang ingin ditambahkan kedalm list
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])

# Mengembalikan urutan
    return fib_sequence[:N]

print(fibonacci_loop(6))

def fibonacci_recursive(N):
    if N <= 1:
        return N
    else:
        return fibonacci_recursive(N-1) + fibonacci_recursive(N-2)  # Rekursi untuk menghitung Fibonacci

def generate_fibonacci(N):
    return [fibonacci_recursive(i) for i in range(N)]  # Buat list Fibonacci hingga N

print(generate_fibonacci(6))

"""EP_5"""

def find_max_min(numbers):
    # Asumsikan elemen pertama adalah nilai max dan min
    max_value = numbers[0]
    min_value = numbers[0]

    # Loop untuk memeriksa setiap elemen
    for num in numbers:
        if num > max_value:
            max_value = num  # Menemukan nilai max
        if num < min_value:
            min_value = num  # Menemukan nilai min

    return max_value, min_value

numbers = [3, 7, 2, 9, 1, 6]
print(find_max_min(numbers))